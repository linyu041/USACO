/*
ID: linyu041
LANG: C++
TASK: wormhole
*/
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<string>
#include<cstring>
using namespace std;
#define LOCAL
#define U(i,j,k) for(int i=j;i<=k;++i)
#define D(i,j,k) for(int i=j;i>=k;--i)
int n,ans;
struct Hole
{
	long long x,y;
	int i;
	bool operator < (const Hole &y)	const{return y.x>x;}
}a[16],e[16];
int f[16],g[16],b[16];
int PD()
{
	int pos;
	U(i,1,n)
	{
		pos=i;
		U(j,1,n)
		{
			if(pos==-1)	break;
			pos=f[g[pos]];
		}
		if(pos!=-1)	return 1;
	}
	return 0;
}
void DDFS()
{
	int i=1;
	while(g[i]!=-1)	i++;
	if(i>n)	
	{
		int flag=0;
		U(x,1,n)	
		{
			flag=PD();
			if(flag)	break;
		}	
		ans+=flag;
	}
	else
	{
		U(j,i+1,n)
		{
			if(g[j]==-1)
			{
				g[i]=j;
				g[j]=i;
				DDFS();
				g[i]=g[j]=-1;
			}
		}
	}
}
int main()
{
	#ifdef LOCAL
		freopen("wormhole.in","r",stdin);
		freopen("wormhole.out","w",stdout);
	#endif
	scanf("%d",&n);
	U(i,1,n)
	{
		scanf("%lld%lld",&a[i].x,&a[i].y);
		e[i].x=a[i].x;
		e[i].y=a[i].y;
		e[i].i=i;
	}
	sort(e+1,e+1+n);
	memset(f,0,sizeof(f));
	U(i,1,n)
	{
		g[i]=-1;
		U(j,i+1,n)
		{
			if(e[i].y==e[j].y)
			{
				f[i]=j;
				break;
			}
		}
		f[i]=f[i]!=0?f[i]:-1;
	}
	DDFS();
	printf("%d\n",ans);
	#ifdef LOCAL
		fclose(stdin);
		fclose(stdout);
	#endif
	return 0;
}
