/*
ID: linyu041
LANG: C++
TASK: wormhole
*/
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<string>
#include<cstring>
using namespace std;
#define LOCAL
#define U(i,j,k) for(int i=j;i<=k;++i)
#define D(i,j,k) for(int i=j;i>=k;--i)
int n,ans;
struct Hole
{
	long long x,y;
	bool operator < (const Hole &y)	const{return y.x>x;}
}a[16];
int b[16],c[16],f[16],g[16];
int Ans(int now,int flag)
{
	int x=0;
	if(flag==1)
	{
		if(!c[g[now]])
		{
			c[g[now]]=1;
			x=Ans(g[now],2);
			return x;
		}
		else	
			return 1;
	}
	else
	{
		if(!c[f[now]]&&f[now]!=0)
		{
			c[f[now]]=1;
			x=Ans(f[now],2);
			return x;
		}
		else	if(f[now]!=0)
			return 1;
		else	return 0;
	}
	return 0;
}
void PD()
{
	U(i,1,n)
	{
		c[i]=0;
	}
	int flag=0;
	U(i,1,n)
	{
		flag=Ans(i,1);
		if(flag)	break;
	}
	ans+=flag;
}
void DDFS(int step)
{
	int i=1;
	if(step<n/2)
	{
		while(g[i])	i++;
		U(j,i+1,n)	
			if(!g[j])	
		{
			g[j]=i;
			g[i]=j;
			DDFS(step+1);
			g[i]=g[j]=0;
		}	
	}
	else	if(step==n/2)
	{
		while(g[i])	i++;
		int j=i+1;
		while(g[j])	j++;
		g[i]=j;
		g[j]=i;
		PD();
	}
}
int main()
{
	#ifdef LOCAL
		freopen("wormhole.in","r",stdin);
		freopen("wormhole.out","w",stdout);
	#endif
	scanf("%d",&n);
	U(i,1,n)
	{
		scanf("%d%d",&a[i].x,&a[i].y);
	}
	sort(a+1,a+1+n);
	U(i,1,n)
	{
		U(j,1,n)
		{
			if(a[i].y==a[j].y&&i!=j)
			{
				f[i]=j;
				break;
			}
		}
	}
	DDFS(1);
	printf("%d\n",ans);
	#ifdef LOCAL
		fclose(stdin);
		fclose(stdout);
	#endif
	return 0;
}
